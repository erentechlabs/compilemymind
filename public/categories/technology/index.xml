<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technology on Compile My Mind</title>
    <link>https://compilemymind.com/categories/technology/</link>
    <description>Recent content in Technology on Compile My Mind</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
    <lastBuildDate>Wed, 06 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://compilemymind.com/categories/technology/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to Solve LeetCode&#39;s Valid Parentheses Problem Using Stack in Java</title>
      <link>https://compilemymind.com/posts/how-to-solve-leetcode-valid-parentheses-using-stack-in-java/</link>
      <pubDate>Wed, 06 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>https://compilemymind.com/posts/how-to-solve-leetcode-valid-parentheses-using-stack-in-java/</guid>
      <description>&lt;p&gt;LeetCode problems can sometimes be frustrating, but other times they can be genuinely fun. What I want to talk about today definitely falls into the fun category. ðŸ˜Š&lt;/p&gt;
&lt;p&gt;Imagine we only have the characters (), {}, and [] to work with. We want to check whether every opening parenthesis, square bracket, and curly brace is correctly closed in the given string.&lt;/p&gt;</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://compilemymind.com/posts/how-to-solve-leetcode-valid-parentheses-using-stack-in-java/featured.jpg" />
    </item>
    
    <item>
      <title>Component vs Bean in Spring</title>
      <link>https://compilemymind.com/posts/component-vs-bean/</link>
      <pubDate>Thu, 31 Jul 2025 00:00:00 +0000</pubDate>
      
      <guid>https://compilemymind.com/posts/component-vs-bean/</guid>
      <description>&lt;p&gt;Spring Framework provides a powerful &lt;strong&gt;Dependency Injection (DI)&lt;/strong&gt; mechanism to manage application components. In this system, objects are managed by an &lt;strong&gt;IoC (Inversion of Control)&lt;/strong&gt; container. But how do we tell Spring which classes or objects it should manage?&lt;/p&gt;</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://compilemymind.com/posts/component-vs-bean/featured.jpg" />
    </item>
    
    <item>
      <title>Understanding @Controller, @Service, and @Repository in Spring Boot</title>
      <link>https://compilemymind.com/posts/spring-boot-layered-architecture/</link>
      <pubDate>Thu, 31 Jul 2025 00:00:00 +0000</pubDate>
      
      <guid>https://compilemymind.com/posts/spring-boot-layered-architecture/</guid>
      <description>&lt;h1 class=&#34;relative group&#34;&gt;Java Spring Boot Layers: What Are @Controller, @Service, and @Repository? 
    &lt;div id=&#34;java-spring-boot-layers-what-are-controller-service-and-repository&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#java-spring-boot-layers-what-are-controller-service-and-repository&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;p&gt;Java is truly an amazing programming language. And among its rich toolkit, Spring Boot definitely stands out as a powerful building block. With Spring Boot, we build fast, effective, and sustainable applications. In this article, weâ€™ll take a closer look at the core layers of Spring Boot: &lt;strong&gt;@Controller&lt;/strong&gt;, &lt;strong&gt;@Service&lt;/strong&gt;, and &lt;strong&gt;@Repository&lt;/strong&gt; annotations.&lt;/p&gt;</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://compilemymind.com/posts/spring-boot-layered-architecture/featured.png" />
    </item>
    
    <item>
      <title>Java vs C#</title>
      <link>https://compilemymind.com/posts/java-vs-csharp/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://compilemymind.com/posts/java-vs-csharp/</guid>
      <description>&lt;h2 class=&#34;relative group&#34;&gt;Java vs C# 
    &lt;div id=&#34;java-vs-c&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#java-vs-c&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;When it comes to object-oriented programming languages, &lt;strong&gt;Java&lt;/strong&gt; and &lt;strong&gt;C#&lt;/strong&gt; are two of the most widely used and highly regarded languages in the software development world. Despite their similarities, they have distinct differences that set them apart in terms of syntax, platform compatibility, performance, and ecosystem. This article will provide an in-depth comparison of Java and C# to help you decide which one is best for your next project.&lt;/p&gt;</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://compilemymind.com/posts/java-vs-csharp/featured.jpg" />
    </item>
    
    <item>
      <title>Why I Like Java More Than Python</title>
      <link>https://compilemymind.com/posts/why-i-like-java-more-than-python/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://compilemymind.com/posts/why-i-like-java-more-than-python/</guid>
      <description>&lt;h2 class=&#34;relative group&#34;&gt;Why I Like Java More Than Python 
    &lt;div id=&#34;why-i-like-java-more-than-python&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline&#34; href=&#34;#why-i-like-java-more-than-python&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;Generally speaking, Java isnâ€™t the most beloved language out there. It requires writing a lot more code, has many rules, and you often need to add extra libraries for things that come built-in with other languages. On top of that, Oracleâ€™s history with licensing lawsuits has given Java a bad reputation among many developers. But despite all that, I still like Java more. I know its flaws, but its strengths mean more to me. Below, I want to explain why â€” with some practical reasons.&lt;/p&gt;</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://compilemymind.com/posts/why-i-like-java-more-than-python/featured.png" />
    </item>
    
  </channel>
</rss>
