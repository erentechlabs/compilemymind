
[{"content":"\r👋 Welcome! #\rI\u0026rsquo;m Eren Karaoğlu, the creator and author behind Compile My Mind — a place where I share my journey, ideas, projects, and thoughts around software development, game creation, and gaming in general.\nI’m a software developer who loves building meaningful, well-structured, and user-focused applications. From designing robust backend systems with Java Spring, to crafting sleek mobile interfaces with Flutter, building desktop tools with WPF, or even developing my own indie games — I enjoy solving real-world problems through code and creativity.\nI also love talking about the games I play, discovering hidden gems, and sharing recommendations based on experience and mood. Whether it\u0026rsquo;s development or just gaming for fun, I\u0026rsquo;m always looking to learn, grow, and connect with others who share the same passion.\n","date":"9 August 2025","externalUrl":null,"permalink":"/","section":"","summary":"\u003ch2 class=\"relative group\"\u003e👋 Welcome! \r\n    \u003cdiv id=\"-welcome\" class=\"anchor\"\u003e\u003c/div\u003e\r\n    \r\n    \u003cspan\r\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\r\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#-welcome\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\r\n    \u003c/span\u003e        \r\n    \r\n\u003c/h2\u003e\r\n\u003cp\u003eI\u0026rsquo;m \u003cstrong\u003eEren Karaoğlu\u003c/strong\u003e, the creator and author behind \u003cstrong\u003eCompile My Mind\u003c/strong\u003e — a place where I share my journey, ideas, projects, and thoughts around software development, game creation, and gaming in general.\u003c/p\u003e","title":"","type":"page"},{"content":"","date":"9 August 2025","externalUrl":null,"permalink":"/tags/algorithms/","section":"Tags","summary":"","title":"Algorithms","type":"tags"},{"content":"","date":"9 August 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"9 August 2025","externalUrl":null,"permalink":"/tags/coding-interview/","section":"Tags","summary":"","title":"Coding Interview","type":"tags"},{"content":"","date":"9 August 2025","externalUrl":null,"permalink":"/tags/data-structures/","section":"Tags","summary":"","title":"Data Structures","type":"tags"},{"content":"","date":"9 August 2025","externalUrl":null,"permalink":"/tags/java/","section":"Tags","summary":"","title":"Java","type":"tags"},{"content":"","date":"9 August 2025","externalUrl":null,"permalink":"/tags/leetcode/","section":"Tags","summary":"","title":"LeetCode","type":"tags"},{"content":"","date":"9 August 2025","externalUrl":null,"permalink":"/tags/problem-solving/","section":"Tags","summary":"","title":"Problem Solving","type":"tags"},{"content":"","date":"9 August 2025","externalUrl":null,"permalink":"/tags/programming/","section":"Tags","summary":"","title":"Programming","type":"tags"},{"content":"Removing duplicates from a sorted array is a common coding interview question.\nIt’s simple at first glance, but it’s also a great way to learn in-place array manipulation and the two-pointer pattern.\nIn this article, we’ll break it down so even if you’re new to Java, you’ll understand not just how to do it, but why it works.\nWhy This Problem is Important #\rTeaches two-pointer logic: A fundamental pattern in algorithm design. In-place modification: Useful when you want to save memory. Common interview question: Appears often in technical screenings. Problem Overview #\rWe are given:\nAn integer array nums, sorted in non-decreasing order. We need to: Remove duplicates so that each unique element appears only once. Keep the relative order of elements the same. Modify the array in-place without creating another array. Return k, the number of unique elements. The values beyond index k-1 don’t matter.\nExample #\rint[] nums = {0, 0, 1, 1, 1, 2, 2, 3, 3, 4}; Output\nk = 5\nThe array nums is modified to:\n[0, 1, 2, 3, 4, _, _, _, _, _]\nThe underscores mean that the values at those indices are irrelevant after processing.\nThought Process #\rBecause the array is already sorted:\nAll duplicates will be next to each other. This makes it easy to detect duplicates by comparing the current element with the previous one. We can:\nUse a pointer k to track where the next unique element should go. Iterate through the array starting from index 1. If the current element is different from the previous one, put it at index k and increment k. Step-by-Step Flow #\rImagine nums = [0,0,1,1,1,2,2,3,3,4]:\nStart with k = 1 (because the first element is always unique). Move through the array with index i: If nums[i] != nums[i - 1], it’s a new number → put it at nums[k], then k++. At the end, k tells us how many unique numbers there are. Complexity #\rTime Complexity: O(n) → We scan the array once. Space Complexity: O(1) → No extra array, we modify in-place. Final Code #\rpublic static int removeDuplicates(int[] nums) { int k = 1; for (int i = 1; i \u0026lt; nums.length; i++) { if (nums[i] != nums[i - 1]) { nums[k] = nums[i]; k++; } } return k; } ","date":"9 August 2025","externalUrl":null,"permalink":"/posts/remove-duplicates-from-sorted-array/","section":"Posts","summary":"\u003cp\u003eRemoving duplicates from a sorted array is a common coding interview question.\u003cbr\u003e\nIt’s simple at first glance, but it’s also a great way to learn \u003cstrong\u003ein-place array manipulation\u003c/strong\u003e and the \u003cstrong\u003etwo-pointer pattern\u003c/strong\u003e.\u003c/p\u003e","title":"Remove Duplicates from Sorted Array — The Two-Pointer Solution","type":"posts"},{"content":"","date":"9 August 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"9 August 2025","externalUrl":null,"permalink":"/categories/technology/","section":"Categories","summary":"","title":"Technology","type":"categories"},{"content":"","date":"9 August 2025","externalUrl":null,"permalink":"/tags/two-pointers/","section":"Tags","summary":"","title":"Two Pointers","type":"tags"},{"content":"","date":"7 August 2025","externalUrl":null,"permalink":"/tags/architecture/","section":"Tags","summary":"","title":"Architecture","type":"tags"},{"content":"","date":"7 August 2025","externalUrl":null,"permalink":"/tags/best-practices/","section":"Tags","summary":"","title":"Best Practices","type":"tags"},{"content":"","date":"7 August 2025","externalUrl":null,"permalink":"/tags/software-development/","section":"Tags","summary":"","title":"Software Development","type":"tags"},{"content":"","date":"7 August 2025","externalUrl":null,"permalink":"/tags/spring-boot/","section":"Tags","summary":"","title":"Spring Boot","type":"tags"},{"content":"Java is truly an amazing programming language. And among its rich toolkit, Spring Boot definitely stands out as a powerful building block. With Spring Boot, we build fast, effective, and sustainable applications. In this article, we’ll take a closer look at the core layers of Spring Boot: Controller, Service, and Repository annotations.\nWhy Layered Architecture? #\rBefore jumping in, let’s quickly understand why layered architecture matters:\nSeparation of concerns: Makes code easier to read and maintain. Testability: Each layer can be tested independently. Reusability: Business logic can be reused in different parts. Scalability: Easier to extend and modify. Controller #\rController is the layer that handles incoming HTTP requests. It listens to what the client asks for and directs the request to the appropriate handler. When building REST APIs, we usually use @RestController which automatically returns JSON or XML responses.\nWe handle HTTP requests using @RequestMapping or its shortcuts like @GetMapping, @PostMapping, @PutMapping, and @DeleteMapping.\n@RestController @RequestMapping(\u0026#34;/api/users\u0026#34;) public class UserController { @Autowired UserService userService; @GetMapping(\u0026#34;/{id}\u0026#34;) public ResponseEntity\u0026lt;UserDto\u0026gt; getUser(@PathVariable Long id) { UserDto user = userService.getUserById(id); return ResponseEntity.ok(user); } @PostMapping public ResponseEntity\u0026lt;UserDto\u0026gt; createUser(@RequestBody UserDto userDto) { UserDto createdUser = userService.createUser(userDto); return ResponseEntity.status(HttpStatus.CREATED).body(createdUser); } } Service #\rThe Service layer is where the business logic lives. Data coming from the controller is processed here — validations, calculations, and any rules specific to the domain are handled in this layer. It’s the brain of the application.\nMarking a class with @Service lets Spring recognize it as a service component and automatically inject it where needed.\n@Service public class UserService { @Autowired UserRepository userRepository; public UserDto getUserById(Long id) { User user = userRepository.findById(id) .orElseThrow(() -\u0026gt; new EntityNotFoundException(\u0026#34;User not found\u0026#34;)); return convertToDto(user); } public UserDto createUser(UserDto userDto) { User user = convertToEntity(userDto); User savedUser = userRepository.save(user); return convertToDto(savedUser); } } Repository #\rRepository is the data access layer, responsible for communicating with the database. Usually defined as an interface extending Spring Data interfaces like JpaRepository or CrudRepository.\nCrudRepository provides basic CRUD operations. JpaRepository extends CrudRepository and also offers pagination and sorting support. You can also write custom queries using the @Query annotation when standard methods aren’t enough.\n@Repository public interface UserRepository extends JpaRepository\u0026lt;User, Long\u0026gt; { List\u0026lt;User\u0026gt; findByLastName(String lastName); @Query(\u0026#34;SELECT u FROM User u WHERE u.email = :email\u0026#34;) Optional\u0026lt;User\u0026gt; findByEmail(@Param(\u0026#34;email\u0026#34;) String email); } How These Layers Work Together #\rA typical request flow goes like this:\nClient sends an HTTP request. Controller receives the request and extracts data. Controller calls the Service layer. Service processes the business logic and calls the Repository layer. Repository interacts with the database. Service returns processed data back to the Controller. Controller sends the response to the client. Summary #\rLayer Responsibility Annotations Example Interfaces Controller Handles HTTP requests \u0026amp; routing @RestController - Service Implements business logic @Service - Repository Manages data access @Repository JpaRepository, CrudRepository Conclusion #\rUsing layered architecture with Controller, Service, and Repository in Spring Boot helps you write code that is clean, testable, and maintainable. These annotations clearly separate responsibilities, making your application easier to build and evolve.\n","date":"7 August 2025","externalUrl":null,"permalink":"/posts/spring-boot-layered-architecture/","section":"Posts","summary":"\u003cp\u003eJava is truly an amazing programming language. And among its rich toolkit, Spring Boot definitely stands out as a powerful building block. With Spring Boot, we build fast, effective, and sustainable applications. In this article, we’ll take a closer look at the core layers of Spring Boot: \u003cstrong\u003eController\u003c/strong\u003e, \u003cstrong\u003eService\u003c/strong\u003e, and \u003cstrong\u003eRepository\u003c/strong\u003e annotations.\u003c/p\u003e","title":"Understanding Controller, Service, and Repository in Spring Boot","type":"posts"},{"content":"LeetCode problems can sometimes be frustrating, but other times they can be genuinely fun. What I want to talk about today definitely falls into the fun category. 😊\nImagine we only have the characters (), {}, and [] to work with. We want to check whether every opening parenthesis, square bracket, and curly brace is correctly closed in the given string.\nFor example, inputs like () or ({[]}) are valid, while something like ()[]{}{ would be invalid because of the unclosed brace at the end.\nThere are several ways to solve this, but today I’ll walk you through a method that uses a data structure called a Stack.\nQuick Refresher: What is a Stack? #\rA Stack is a data structure that stores items in a last-in, first-out (LIFO) manner. Think of it like a stack of plates—what goes in last comes out first. Here\u0026rsquo;s a simple visual to imagine it: Now let’s apply this to our parentheses validation problem.\nStep-by-Step Solution #\rWe will write a method that takes a string input, such as \u0026ldquo;()[]{}\u0026rdquo;, and returns true if the parentheses are valid, or false if they’re not.\n1. Define the Method #\rpublic static boolean isValid(String s) The input s will be a string like \u0026ldquo;()[]{}\u0026rdquo;. We return a boolean indicating whether the parentheses are valid.\n2. Declare a Stack #\rWe’ll use a Stack to keep track of opening brackets:\nStack\u0026lt;Character\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); 3. Iterate Through the Characters #\rWe loop through each character in the string:\nfor (char c : s.toCharArray()) 4. Push Opening Brackets onto the Stack #\rIf we encounter an opening bracket, we push it onto the stack:\nif (c == \u0026#39;(\u0026#39; || c == \u0026#39;[\u0026#39; || c == \u0026#39;{\u0026#39;) { stack.push(c); } 5. Handle Closing Brackets #\rIf we encounter a closing bracket, we first check if the stack is empty. If it is, that means there was no corresponding opening bracket, so we return false.\nThen, we look at the top of the stack using peek() (without removing it) to check if it matches the closing bracket. If it doesn’t match, we return false. If it does, we remove the top of the stack using pop():\nelse { if (stack.isEmpty()) return false; char top = stack.peek(); if ((c == \u0026#39;)\u0026#39; \u0026amp;\u0026amp; top != \u0026#39;(\u0026#39;) || (c == \u0026#39;]\u0026#39; \u0026amp;\u0026amp; top != \u0026#39;[\u0026#39;) || (c == \u0026#39;}\u0026#39; \u0026amp;\u0026amp; top != \u0026#39;{\u0026#39;)) { return false; } stack.pop(); } 6. Final Validation #\rIf the stack is empty at the end, that means all opening brackets had matching closing brackets. Otherwise, some were left unmatched.\nreturn stack.isEmpty(); Summary #\rHere’s the complete method:\npublic static boolean isValid(String s) { Stack\u0026lt;Character\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); for (char c : s.toCharArray()) { if (c == \u0026#39;(\u0026#39; || c == \u0026#39;[\u0026#39; || c == \u0026#39;{\u0026#39;) { stack.push(c); } else { if (stack.isEmpty()) return false; char top = stack.peek(); if ((c == \u0026#39;)\u0026#39; \u0026amp;\u0026amp; top != \u0026#39;(\u0026#39;) || (c == \u0026#39;]\u0026#39; \u0026amp;\u0026amp; top != \u0026#39;[\u0026#39;) || (c == \u0026#39;}\u0026#39; \u0026amp;\u0026amp; top != \u0026#39;{\u0026#39;)) { return false; } stack.pop(); } } return stack.isEmpty(); } ","date":"6 August 2025","externalUrl":null,"permalink":"/posts/how-to-solve-leetcode-valid-parentheses-using-stack-in-java/","section":"Posts","summary":"\u003cp\u003eLeetCode problems can sometimes be frustrating, but other times they can be genuinely fun. What I want to talk about today definitely falls into the fun category. 😊\u003c/p\u003e\n\u003cp\u003eImagine we only have the characters (), {}, and [] to work with. We want to check whether every opening parenthesis, square bracket, and curly brace is correctly closed in the given string.\u003c/p\u003e","title":"How to Solve LeetCode's Valid Parentheses Problem Using Stack in Java","type":"posts"},{"content":"","date":"6 August 2025","externalUrl":null,"permalink":"/tags/stack/","section":"Tags","summary":"","title":"Stack","type":"tags"},{"content":"Steam remains the digital heart of PC gaming. With millions of concurrent players at any given moment, its most-played charts offer a revealing glimpse into the tastes and trends shaping the community. From long-time champions to fresh viral hits, here’s a deep dive into the 20 most played games on Steam, based on player data as of August 1, 2025.\n🥇 1. Counter-Strike 2 #\rGenre: Tactical FPS\nDeveloper: Valve\nConcurrent Players: 939,836\nValve\u0026rsquo;s iconic tactical shooter continues to dominate the charts. Counter-Strike 2 refines the formula with Source 2 enhancements, razor-sharp mechanics, and a fiercely loyal competitive scene. It’s not just a game—it’s an institution.\n🥈 2. Dota 2 #\rGenre: MOBA\nDeveloper: Valve\nConcurrent Players: 474,374\nA MOBA giant that shows no signs of fading. Dota 2 rewards strategic depth, mechanical skill, and teamwork, with every match telling a different story. Its steep learning curve is a badge of honor for veterans.\n🥉 3. PUBG: BATTLEGROUNDS #\rGenre: Battle Royale\nDeveloper: KRAFTON\nConcurrent Players: 147,607\nThe game that popularized battle royale is still attracting high-stakes survivalists. PUBG\u0026rsquo;s slower pace and realistic gunplay set it apart from its flashier peers, rewarding precision and patience.\n4. Rust #\rGenre: Survival Sandbox\nDeveloper: Facepunch Studios\nConcurrent Players: 119,827\nMore than a survival game, Rust is a social experiment gone off the rails. Cooperation and betrayal go hand-in-hand in its brutal sandbox where anything—and anyone—can be weaponized.\n5. Marvel Rivals #\rGenre: Hero Shooter\nDeveloper: NetEase Games\nConcurrent Players: 108,542\nMarvel meets Overwatch in this high-energy team shooter. With beloved characters and ability-driven combat, Marvel Rivals taps into a massive fanbase while delivering fast-paced, strategic gameplay.\n6. Source SDK Base 2007 #\rGenre: Engine Framework\nDeveloper: Valve\nConcurrent Players: 100,898\nNot exactly a game, but its inclusion reflects the backend usage of Valve’s Source engine. Frequently used for mods, legacy games, and community servers—it’s the quiet engine powering parts of Steam’s ecosystem.\n7. Banana #\rGenre: Clicker / Idle\nDeveloper: Unknown\nConcurrent Players: 86,502\nA surreal viral hit where\u0026hellip; you click a banana. That’s the whole game. It’s absurd, hilarious, and probably botted—but it’s undeniably one of the most-played titles right now. Internet culture in its rawest form.\n8. Tom Clancy’s Rainbow Six® Siege X #\rGenre: Tactical Shooter\nDeveloper: Ubisoft\nConcurrent Players: 85,042\nThe tactical FPS evolves yet again with the \u0026ldquo;X\u0026rdquo; edition. Siege remains a thinking-person’s shooter—one where intel, timing, and operator synergy outweigh sheer reflexes.\n9. Dead by Daylight #\rGenre: Asymmetrical Horror\nDeveloper: Behaviour Interactive\nConcurrent Players: 74,385\nA terrifying game of cat and mouse. With its mix of original and licensed killers, Dead by Daylight remains the go-to horror multiplayer experience. Few games offer such sustained tension.\n10. GTA V Legacy #\rGenre: Open-World Action\nDeveloper: Rockstar Games\nConcurrent Players: 69,584\nTen years in, GTA V is still raking in players. Whether it’s through heists, roleplay servers, or chaotic online lobbies, Los Santos continues to be one of gaming’s busiest cities.\n11–20: At a Glance #\r11. EA SPORTS FC 25 #\rThe post-FIFA evolution keeps football fans hooked with Ultimate Team, career mode, and official licensing.\n12. Baldur\u0026rsquo;s Gate 3 #\rA rich, cinematic CRPG that brings Dungeons \u0026amp; Dragons to life. Deep characters, real choices, and memorable storytelling.\n13. Apex Legends #\rA fast, vertical, and ability-driven battle royale with a focus on movement and hero synergy.\n14. Destiny 2 #\rBungie’s hybrid MMO shooter still thrives, offering cosmic lore, raids, and tight gunplay.\n15. Bongo Cat #\rLess game, more internet meme. You click, the cat plays an instrument. Surprisingly relaxing.\n16. RimWorld #\rA colony sim powered by emergent storytelling and procedural chaos. Every failure is a fun disaster.\n17. Call of Duty® #\rLikely Warzone or the latest installment—Call of Duty continues to deliver polished, high-octane action.\n18. PEAK #\rA new contender entering the charts—details are scarce, but the momentum is real.\n19. Football Manager 2024 #\rFor those who dream of managing rather than playing. Tactical depth and obsessive detail make it a niche masterpiece.\n20. Warframe #\rSpace ninjas, loot, and co-op missions. Warframe’s flow state gameplay is still unmatched in the F2P arena.\n🎯 Final Thoughts #\rFrom competitive shooters and esports titans to clicker memes and complex simulations, Steam’s most played list paints a broad picture of what PC gamers are obsessed with right now. It’s not just about what’s new or shiny—it’s about what keeps players coming back, match after match, day after day.\nWhether you’re fragging out, building colonies, or just\u0026hellip; clicking a banana, August 2025 has something for everyone.\n","date":"1 August 2025","externalUrl":null,"permalink":"/posts/most-popular-games-on-steam-in-august/","section":"Posts","summary":"\u003cp\u003eSteam remains the digital heart of PC gaming. With millions of concurrent players at any given moment, its most-played charts offer a revealing glimpse into the tastes and trends shaping the community. From long-time champions to fresh viral hits, here’s a deep dive into \u003cstrong\u003ethe 20 most played games on Steam\u003c/strong\u003e, based on player data as of August 1, 2025.\u003c/p\u003e","title":"🎮 The 20 Most Played Games on Steam (August 2025)","type":"posts"},{"content":"","date":"1 August 2025","externalUrl":null,"permalink":"/categories/gaming/","section":"Categories","summary":"","title":"Gaming","type":"categories"},{"content":"","date":"1 August 2025","externalUrl":null,"permalink":"/tags/gaming-trends/","section":"Tags","summary":"","title":"Gaming Trends","type":"tags"},{"content":"","date":"1 August 2025","externalUrl":null,"permalink":"/tags/multiplayer/","section":"Tags","summary":"","title":"Multiplayer","type":"tags"},{"content":"","date":"1 August 2025","externalUrl":null,"permalink":"/tags/pc-gaming/","section":"Tags","summary":"","title":"PC Gaming","type":"tags"},{"content":"","date":"1 August 2025","externalUrl":null,"permalink":"/tags/steam/","section":"Tags","summary":"","title":"Steam","type":"tags"},{"content":"","date":"1 August 2025","externalUrl":null,"permalink":"/tags/top-games/","section":"Tags","summary":"","title":"Top Games","type":"tags"},{"content":"","date":"31 July 2025","externalUrl":null,"permalink":"/tags/comparison/","section":"Tags","summary":"","title":"Comparison","type":"tags"},{"content":"Spring Framework provides a powerful Dependency Injection (DI) mechanism to manage application components. In this system, objects are managed by an IoC (Inversion of Control) container. But how do we tell Spring which classes or objects it should manage?\nThere are two common approaches:\n@Component @Bean Although both serve the same end goal—registering a bean with the Spring container—they work in different ways and are used in different contexts. Let’s explore their differences with examples and best practices.\nWhat is @Component? #\r@Component is a class-level annotation that tells Spring to automatically detect and register the class as a bean during component scanning.\nimport org.springframework.stereotype.Component; @Component public class MyService { public void doSomething() { System.out.println(\u0026#34;Component-based service is working!\u0026#34;); } } 🔍 Note: Annotations like @Service, @Repository, and @Controller are specializations of @Component. They provide semantic meaning in layered architectures.\nTo enable component scanning, you need to annotate your configuration class like this:\n@Configuration @ComponentScan(basePackages = \u0026#34;com.example\u0026#34;) public class AppConfig { } What is @Bean? #\r@Bean is used to explicitly declare a bean in a method inside a @Configuration class. It\u0026rsquo;s perfect for registering beans manually or configuring third-party objects.\nimport org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class AppConfig { @Bean public MyService myService() { return new MyService(); } } Feature Component Bean Placement On the class On a method Registration Automatic via scanning Explicit via method Flexibility Less flexible More flexible External Libraries Not suitable Suitable Dependency Injection Via constructor or field Via method parameters When Should You Use Each? #\rUse Component when: #\rYou control the class source code.\nYou want automatic discovery and registration.\nYou’re organizing your app into layers (@Service, @Repository, etc.).\nUse Bean when: #\rYou\u0026rsquo;re working with external libraries or third-party classes.\nYou need to manually configure or customize the object.\nYou want fine-grained control over bean creation.\nConclusion #\rBoth @Component and @Bean are essential tools for defining Spring beans, but they shine in different scenarios.\nUse @Component for classes you write and control.\nUse @Bean for manual configuration, third-party classes, or when you need full control over instantiation.\nUnderstanding the strengths and use-cases of each will help you write cleaner, more maintainable Spring applications.\n","date":"31 July 2025","externalUrl":null,"permalink":"/posts/component-vs-bean/","section":"Posts","summary":"\u003cp\u003eSpring Framework provides a powerful \u003cstrong\u003eDependency Injection (DI)\u003c/strong\u003e mechanism to manage application components. In this system, objects are managed by an \u003cstrong\u003eIoC (Inversion of Control)\u003c/strong\u003e container. But how do we tell Spring which classes or objects it should manage?\u003c/p\u003e","title":"Component vs Bean in Spring","type":"posts"},{"content":"","date":"31 July 2025","externalUrl":null,"permalink":"/tags/development/","section":"Tags","summary":"","title":"Development","type":"tags"},{"content":"","date":"31 July 2025","externalUrl":null,"permalink":"/tags/software/","section":"Tags","summary":"","title":"Software","type":"tags"},{"content":"","date":"22 July 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"Action games offer adrenaline-pumping experiences that test your reflexes, precision, and tactical thinking. From fast-paced shooters to open-world adventures, Steam is home to some of the best action titles available today. Here’s a detailed look at the Top 10 Action Games on Steam that every action fan should experience.\n1. DOOM Eternal #\rGenre: First-Person Shooter\nDeveloper: id Software\nDOOM Eternal is pure, fast, brutal action at its finest. As the Doom Slayer, you battle legions of demons across hellish landscapes with a vast arsenal of weapons. The game’s tight combat, fluid movement system, and heavy metal soundtrack create an adrenaline-fueled masterpiece.\n2. Sekiro: Shadows Die Twice #\rGenre: Action-Adventure\nDeveloper: FromSoftware\nSekiro: Shadows Die Twice offers a unique blend of stealth, exploration, and intense sword combat. Set in a reimagined late 1500s Japan, you play as a shinobi tasked with protecting a young lord. The game rewards precision, patience, and mastering its challenging combat system.\n3. Red Dead Redemption 2 #\rGenre: Action-Adventure / Open World\nDeveloper: Rockstar Games\nRed Dead Redemption 2 isn’t just an action game — it\u0026rsquo;s an epic journey through a beautifully realized Wild West. Whether you\u0026rsquo;re getting into shootouts, robbing trains, or exploring vast landscapes, the game\u0026rsquo;s rich storytelling and immersive world make it unforgettable.\n4. Resident Evil 4 Remake #\rGenre: Survival Horror / Action\nDeveloper: Capcom\nResident Evil 4 Remake revitalizes a classic, blending tense survival horror with thrilling action. You’ll battle hordes of infected villagers and grotesque monsters while uncovering a chilling conspiracy. The updated visuals and gameplay improvements make it a must-play.\n5. Hades #\rGenre: Action Roguelike\nDeveloper: Supergiant Games\nHades delivers fast-paced combat wrapped in beautiful art and engaging storytelling. As Zagreus, the rebellious son of Hades, you fight your way out of the Underworld using a variety of weapons and powerful abilities. Each run feels fresh, challenging, and rewarding.\n6. Cyberpunk 2077: Phantom Liberty #\rGenre: Action RPG / Open World\nDeveloper: CD Projekt Red\nWith its major updates and the Phantom Liberty expansion, Cyberpunk 2077 has evolved into a truly excellent action experience. Set in the neon-lit dystopia of Night City, the game features intense firefights, deep customization, and an engaging storyline driven by your choices.\n7. Control: Ultimate Edition #\rGenre: Action-Adventure / Supernatural\nDeveloper: Remedy Entertainment\nControl offers one of the most unique action experiences on Steam. As Jesse Faden, you explore a mysterious, shifting building filled with strange phenomena. Using supernatural powers and powerful firearms, the gameplay seamlessly combines shooting, telekinesis, and exploration.\n8. Dead Cells #\rGenre: Action Platformer / Roguelike\nDeveloper: Motion Twin\nDead Cells is a challenging, addictive roguelike action platformer. Its fast-paced combat, procedurally generated levels, and varied weapons encourage experimentation and quick thinking. Each run is different, keeping the gameplay exciting and fresh.\n9. METAL GEAR RISING: REVENGEANCE #\rGenre: Hack and Slash\nDeveloper: PlatinumGames\nMETAL GEAR RISING: REVENGEANCE is an over-the-top, exhilarating hack-and-slash game. You control Raiden, a cyborg ninja, slicing through enemies with a unique free-form cutting system. The game’s fast combat and epic boss battles are unforgettable.\n10. Shadow of the Tomb Raider #\rGenre: Action-Adventure\nDeveloper: Eidos-Montréal\nShadow of the Tomb Raider follows Lara Croft’s journey as she races to stop a Mayan apocalypse. The game blends intense combat, exploration, and puzzle-solving in lush, dangerous environments. It’s a fitting finale to Lara\u0026rsquo;s reboot trilogy.\n🔥 Final Thoughts #\rAction games on Steam deliver some of the most thrilling experiences in gaming. Whether you prefer slaying demons, mastering stealthy swordplay, or surviving zombie hordes, these 10 titles offer the best of what\n","date":"28 April 2025","externalUrl":null,"permalink":"/posts/top-10-action-games-on-steam/","section":"Posts","summary":"\u003cp\u003eAction games offer adrenaline-pumping experiences that test your reflexes, precision, and tactical thinking. From fast-paced shooters to open-world adventures, Steam is home to some of the best action titles available today. Here’s a detailed look at the \u003cstrong\u003eTop 10 Action Games on Steam\u003c/strong\u003e that every action fan should experience.\u003c/p\u003e","title":"🎮 Top 10 Best Action Games on Steam","type":"posts"},{"content":"","date":"28 April 2025","externalUrl":null,"permalink":"/tags/action-games/","section":"Tags","summary":"","title":"Action Games","type":"tags"},{"content":"","date":"28 April 2025","externalUrl":null,"permalink":"/tags/gaming/","section":"Tags","summary":"","title":"Gaming","type":"tags"},{"content":"","date":"28 April 2025","externalUrl":null,"permalink":"/tags/top-10/","section":"Tags","summary":"","title":"Top 10","type":"tags"},{"content":"\r🛡️ Age of Empires Fans, This One’s for You #\rIf you’re the type who thinks,\n“Let me gather some wood, boom my economy, build a castle and rush the enemy before they even make a barracks,”\n—then welcome, my friend.\nHere are 10 games on Steam that’ll scratch that Age of Empires itch, whether you\u0026rsquo;re into medieval warfare, Viking legends, ancient empires, or just love watching villagers do your bidding while you sip coffee like a war god.\n1. 🏰 Stronghold: Definitive Edition #\rWhy it\u0026rsquo;s dope: You build a castle. You manage your peasants. You throw boiling oil at invaders. What\u0026rsquo;s not to love? Feels like: AoE, but with more focus on castle sim and medieval vibes. 2. ⚔️ Total War: Medieval II – Definitive Edition #\rWhy it\u0026rsquo;s dope: Turn-based empire-building meets real-time battles. Think AoE but with giant maps and bigger politics. Pro tip: Always bribe the Pope. 3. 🌾 Banished #\rWhy it\u0026rsquo;s dope: No war, just vibes. You\u0026rsquo;re building a tiny survival town and trying not to let everyone starve or freeze to death. Stress level: 9/10 when winter hits and food’s running low. 4. 🛡 Company of Heroes 2 #\rWhy it\u0026rsquo;s dope: WWII RTS done right. Squad-based combat, territory control, and some seriously intense firefights. For AoE fans who: Want something faster-paced and tactical. 5. 🐘 0 A.D. #\rWhy it\u0026rsquo;s dope: It’s free. It’s open source. It’s basically AoE made by fans, for fans. Fun fact: You can mod the heck out of it. 6. 🔥 Rise of Nations: Extended Edition #\rWhy it\u0026rsquo;s dope: You go from ancient times all the way to nukes and jets. One of the best tech trees ever. Pro tip: Rush to the Gunpowder Age. It’s wild. 7. 🏛 Caesar IV #\rWhy it\u0026rsquo;s dope: It’s like SimCity but in the Roman Empire. You build roads, entertain plebs, and try not to anger the gods. Great for: Chill city-building with a touch of imperial pressure. 8. 🪓 Northgard #\rWhy it\u0026rsquo;s dope: Vikings + survival + strategy. You pick a clan, expand your territory, and pray you survive the winter wolves. Feels like: AoE meets Norse mythology. 9. 🐉 Warcraft III: Reforged #\rWhy it\u0026rsquo;s dope: RTS meets epic fantasy. Great campaigns, iconic heroes, and\u0026hellip; yeah, it’s still fun, even if the remaster caused some drama. Nostalgia level: Over 9000. 10. ⚙️ They Are Billions #\rWhy it\u0026rsquo;s dope: It’s like SimCity\u0026hellip; if the city was under constant threat from literal billions of zombies. Warning: One tiny hole in your wall = total apocalypse. 🎯 Final Thoughts: Boom, Rush, Dominate #\rLet’s be honest: Age of Empires isn’t just a game — it’s a lifestyle. And while nothing quite replaces that feeling of a perfect Fast Castle into Longbow spam, these games come pretty damn close.\nSo if you\u0026rsquo;re itching for more RTS chaos, historical wars, or just want to watch a tiny digital society rise (or crumble), this list’s got your back.\n🛠️ Build that base. 🏹 Train that army. ⚔️ Hit that enemy when they least expect it.\nBecause let’s face it — one villager is never enough.\n","date":"4 April 2025","externalUrl":null,"permalink":"/posts/10-strategy-games-on-steam-that-feel-like-age-of-empires/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e🛡️ Age of Empires Fans, This One’s for You \r\n    \u003cdiv id=\"-age-of-empires-fans-this-ones-for-you\" class=\"anchor\"\u003e\u003c/div\u003e\r\n    \r\n    \u003cspan\r\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\r\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#-age-of-empires-fans-this-ones-for-you\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\r\n    \u003c/span\u003e        \r\n    \r\n\u003c/h2\u003e\r\n\u003cp\u003eIf you’re the type who thinks,\u003cbr\u003e\n\u003cem\u003e“Let me gather some wood, boom my economy, build a castle and rush the enemy before they even make a barracks,”\u003c/em\u003e\u003cbr\u003e\n—then welcome, my friend.\u003c/p\u003e","title":"🎮 10 Strategy Games on Steam That Feel Like Age of Empires","type":"posts"},{"content":"","date":"4 April 2025","externalUrl":null,"permalink":"/tags/rts/","section":"Tags","summary":"","title":"RTS","type":"tags"},{"content":"","date":"4 April 2025","externalUrl":null,"permalink":"/tags/strategy-games/","section":"Tags","summary":"","title":"Strategy Games","type":"tags"},{"content":"Strategy games challenge your mind, test your patience, and reward your planning skills. Whether you enjoy building empires, leading armies, or managing resources, Steam has some of the best strategy titles in gaming history. Here’s a detailed look at the Top 10 Strategy Games on Steam that every strategy fan should try.\n1. Sid Meier’s Civilization VI #\rGenre: Turn-Based Strategy\nDeveloper: Firaxis Games\nCivilization VI is one of the most popular strategy games ever created. In this game, you take control of a historical leader and build a civilization from the Stone Age to the Information Age. You’ll manage resources, expand your empire, engage in diplomacy, and wage war against other civilizations. Every decision matters — whether it’s where to build a city or how to negotiate peace. With dozens of civilizations to choose from and randomly generated maps, every game offers a unique challenge and new story.\n2. Total War: Warhammer III #\rGenre: Grand Strategy \u0026amp; Real-Time Tactics\nDeveloper: Creative Assembly\nIf you enjoy large-scale battles and fantasy worlds, Total War: Warhammer III is a masterpiece. This game blends turn-based empire building with real-time tactical combat in the Warhammer Fantasy universe. You can command terrifying armies, including demons, dragons, and legendary heroes. The massive campaign map is packed with diplomatic intrigue, resource management, and intense warfare.\n3. Age of Empires IV #\rGenre: Real-Time Strategy\nDeveloper: Relic Entertainment\nAge of Empires IV is a return to the golden age of real-time strategy. It offers a fresh take on the classic formula of gathering resources, building bases, and leading armies to victory. Set across various historical periods, you can choose from multiple civilizations, each with unique units and abilities. The game also includes engaging single-player campaigns based on real historical events.\n4. Crusader Kings III #\rGenre: Grand Strategy \u0026amp; Role-Playing\nDeveloper: Paradox Interactive\nCrusader Kings III is not just a strategy game; it’s a medieval soap opera. You take control of a noble dynasty, making decisions about war, marriage, diplomacy, and religion. Every member of your dynasty has unique traits and ambitions, and you can manipulate, scheme, or even murder your way to power.\n5. XCOM 2 #\rGenre: Turn-Based Tactics\nDeveloper: Firaxis Games\nXCOM 2 is a tense, tactical strategy game where every choice matters. You lead a resistance force fighting against alien invaders who have taken over Earth. The game features challenging turn-based combat, where positioning, line of sight, and cover are crucial. Additionally, you’ll manage your base, research alien technology, and recruit soldiers.\n6. Stellaris #\rGenre: Grand Strategy / 4X\nDeveloper: Paradox Interactive\nStellaris takes strategy gaming to the stars. It’s a grand strategy game where you control a space-faring civilization and lead it to galactic dominance. You’ll explore the galaxy, colonize new planets, establish diplomatic relations, and engage in massive space battles.\n7. Company of Heroes 2 #\rGenre: Real-Time Tactics\nDeveloper: Relic Entertainment\nCompany of Heroes 2 is a World War II real-time strategy game that focuses on tactical combat rather than base building. You’ll command squads of infantry, tanks, and artillery in dynamic and destructible environments. The game emphasizes cover, flanking, and resource control.\n8. Factorio #\rGenre: Factory Building / Strategy\nDeveloper: Wube Software\nFactorio is a strategy game with a twist — instead of commanding armies, you build massive automated factories. You crash-land on an alien planet and must gather resources, research technologies, and defend yourself from hostile creatures. The challenge is in optimizing production lines and logistics systems.\n9. Frostpunk #\rGenre: City Builder / Survival Strategy\nDeveloper: 11 bit studios\nFrostpunk is a survival city-builder with a dark, emotional twist. Set in a frozen, post-apocalyptic world, you must build and manage the last city on Earth. Resources are scarce, and every decision has moral consequences — will you enforce child labor to keep your city alive?\n10. Northgard #\rGenre: Real-Time Strategy\nDeveloper: Shiro Games\nNorthgard is a Viking-themed real-time strategy game that blends classic RTS gameplay with survival and exploration elements. You control a clan of Vikings who have discovered a mysterious new land. You’ll need to manage resources, expand your territory, and deal with harsh winters and mythical creatures.\n🔥 Final Thoughts #\rStrategy games on Steam offer endless hours of challenging, rewarding gameplay. Whether you enjoy building empires, leading armies, or managing survival, these 10 games represent the best the genre has to offer. From historical warfare to futuristic space adventures, there’s something here for every strategist.\n","date":"28 March 2025","externalUrl":null,"permalink":"/posts/top-10-strategy-games-on-steam/","section":"Posts","summary":"\u003cp\u003eStrategy games challenge your mind, test your patience, and reward your planning skills. Whether you enjoy building empires, leading armies, or managing resources, Steam has some of the best strategy titles in gaming history. Here’s a detailed look at the \u003cstrong\u003eTop 10 Strategy Games on Steam\u003c/strong\u003e that every strategy fan should try.\u003c/p\u003e","title":"🎮 Top 10 Best Strategy Games on Steam","type":"posts"},{"content":"","date":"28 March 2025","externalUrl":null,"permalink":"/tags/c%23/","section":"Tags","summary":"","title":"C#","type":"tags"},{"content":"\rJava vs C# #\rWhen it comes to object-oriented programming languages, Java and C# are two of the most widely used and highly regarded languages in the software development world. Despite their similarities, they have distinct differences that set them apart in terms of syntax, platform compatibility, performance, and ecosystem. This article will provide an in-depth comparison of Java and C# to help you decide which one is best for your next project.\nOverview #\rJava was created by Sun Microsystems (now owned by Oracle) in the mid-1990s, with a primary focus on portability and cross-platform compatibility. It is widely used in enterprise environments, web applications, and Android development.\nC#, developed by Microsoft in 2000 as part of the .NET framework, was initially a Windows-based language. Over time, with the advent of .NET Core, C# has become a cross-platform language, supporting Windows, Linux, and macOS.\nSimilarities Between Java and C# #\rObject-Oriented: Both Java and C# are purely object-oriented languages, following OOP principles like encapsulation, inheritance, and polymorphism. Garbage Collection: Both languages have automatic memory management via garbage collection, which helps avoid memory leaks by reclaiming unused memory. Cross-Platform Support: Although Java traditionally offered the advantage of \u0026ldquo;Write Once, Run Anywhere\u0026rdquo; with the Java Virtual Machine (JVM), C# has also become a cross-platform language with .NET Core, now known as .NET 5/6. Multithreading: Both Java and C# have robust support for multithreading and concurrent programming, making it easier to build high-performance applications. Key Differences Between Java and C# #\r1. Platform Independence #\rJava: Java is well-known for its platform independence. Java code is compiled to bytecode, which can be executed on any platform with a JVM, enabling it to run on Windows, Linux, macOS, and other systems without modification.\nC#: C# was initially confined to the Windows platform using the .NET Framework. However, .NET Core (now .NET 5/6) allows C# to run on multiple platforms, including Linux and macOS, making it a viable choice for cross-platform development.\n2. Syntax and Features #\rJava: Java’s syntax is slightly more verbose compared to C#. Java uses exceptions and error handling mechanisms such as try-catch blocks, and it does not have built-in support for properties, delegates, or events.\nC#: C# has more modern features, such as properties, events, delegates, and LINQ (Language Integrated Query). It supports more advanced constructs, including async/await for asynchronous programming. This makes C# a more feature-rich and flexible language.\n3. Performance #\rJava: Java is slower in terms of startup time, but its performance improves over time thanks to Just-In-Time (JIT) compilation by the JVM. Java is often considered a bit slower compared to C# in terms of execution speed but can be highly optimized for server-side applications.\nC#: C# tends to have faster startup times and slightly better raw performance due to its compilation to Intermediate Language (IL), which is executed by the Common Language Runtime (CLR). C# has more direct access to Windows APIs and can be more optimized for desktop applications.\n4. Ecosystem and Frameworks #\rJava: Java has a vast ecosystem, especially for enterprise applications, Android development, and big data platforms. Popular frameworks like Spring (for web development) and Hibernate (for ORM) are widely used in the Java world.\nC#: C# is closely tied to the .NET Framework and the .NET Core ecosystem. It supports ASP.NET for web development, WPF (Windows Presentation Foundation) for desktop applications, and Xamarin for mobile development. The .NET ecosystem continues to grow, and C# is gaining traction in areas like cloud computing and cross-platform apps.\n5. Development Tools #\rJava: Java developers typically use IntelliJ IDEA, Eclipse, or NetBeans for development. These IDEs offer rich features and plugins for Java development, including debugging, code completion, and refactoring tools.\nC#: C# developers primarily use Microsoft Visual Studio, one of the most feature-rich IDEs available. Visual Studio offers robust debugging tools, IntelliSense, and integrates seamlessly with Azure, SQL Server, and other Microsoft products.\n6. Use Cases #\rJava:\nEnterprise Applications: Java is highly favored in large-scale enterprise environments, especially in finance, government, and healthcare sectors. Android Development: Java was the primary language for Android app development (though Kotlin has become more popular in recent years). Big Data: Java is heavily used in big data technologies like Apache Hadoop and Apache Spark. Cloud Computing: Java is widely used in cloud-based applications, particularly in Amazon Web Services (AWS). C#:\nWindows Applications: C# is the language of choice for desktop applications on Windows, particularly using WPF and WinForms. Web Development: ASP.NET Core is a robust framework for web development with C#, used for building scalable and high-performance web applications. Game Development: C# is widely used in game development, particularly with the Unity engine. Cross-Platform Development: C# with Xamarin allows for the creation of cross-platform mobile applications. 7. Community and Job Market #\rJava: Java has a massive and mature community, with a strong presence in enterprise applications, Android development, and backend systems. There is always high demand for Java developers, especially for roles in enterprise environments, big data, and cloud computing.\nC#: C# is widely used within the Microsoft ecosystem and is also increasingly popular in the gaming industry due to Unity. The rise of .NET Core has made C# a strong candidate for cloud-based applications and cross-platform development, making C# developers highly sought after, particularly in game development and enterprise application development.\nConclusion #\rBoth Java and C# are powerful, versatile languages that have stood the test of time. The choice between Java and C# largely depends on the platform, the type of application, and the development tools you prefer.\nIf you are developing for cross-platform environments, need portability, or are working with Android, Java is a strong choice. If you are working with the Microsoft tech stack, developing for Windows desktop apps, or interested in game development with Unity, C# would be ideal. Ultimately, both languages offer robust features, strong communities, and solid performance. Understanding their strengths and weaknesses will help you decide which is best suited for your specific project.\n","date":"28 March 2025","externalUrl":null,"permalink":"/posts/java-vs-csharp/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003eJava vs C# \r\n    \u003cdiv id=\"java-vs-c\" class=\"anchor\"\u003e\u003c/div\u003e\r\n    \r\n    \u003cspan\r\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\r\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#java-vs-c\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\r\n    \u003c/span\u003e        \r\n    \r\n\u003c/h2\u003e\r\n\u003cp\u003eWhen it comes to object-oriented programming languages, \u003cstrong\u003eJava\u003c/strong\u003e and \u003cstrong\u003eC#\u003c/strong\u003e are two of the most widely used and highly regarded languages in the software development world. Despite their similarities, they have distinct differences that set them apart in terms of syntax, platform compatibility, performance, and ecosystem. This article will provide an in-depth comparison of Java and C# to help you decide which one is best for your next project.\u003c/p\u003e","title":"Java vs C#","type":"posts"},{"content":"","date":"28 March 2025","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"\rWhy I Like Java More Than Python #\rGenerally speaking, Java isn’t the most beloved language out there. It requires writing a lot more code, has many rules, and you often need to add extra libraries for things that come built-in with other languages. On top of that, Oracle’s history with licensing lawsuits has given Java a bad reputation among many developers. But despite all that, I still like Java more. I know its flaws, but its strengths mean more to me. Below, I want to explain why — with some practical reasons.\n1. Static Typing – Catching Errors Early #\rIn Java, you have to declare variable types explicitly before using them. It may feel like a hassle at first, but in big projects, it really helps.\nFor example, in Python, you can define a function that adds two values, but if you accidentally pass a string and a number, it will crash at runtime. Java, on the other hand, catches this kind of mistake before the program even runs. This difference can save a lot of debugging time in complex systems.\n2. Performance – Safer for Long-Running Tasks #\rJava runs on the JVM and is much faster than Python. This matters in large-scale data processing, server-side applications, or services that run continuously.\nFor instance, reading and processing millions of log entries usually completes faster and more efficiently in Java than in Python.\n3. C-Style Syntax – Feeling More Disciplined While Coding #\rSome developers find Java’s syntax — with curly braces, semicolons, and keywords like public static void — overly verbose. But I find this structure helpful. It forces discipline and makes the code more predictable, especially in large teams or enterprise environments.\n4. OOP – Breaking Down Software into Pieces #\rJava takes object-oriented programming seriously. It encourages you to define proper classes, methods, constructors, and access controls. This can feel tedious in small scripts but becomes essential in larger applications.\nIn contrast, while Python supports OOP, it allows looser structure, which can lead to messier codebases over time.\n5. Spring and Ecosystem – Building Large Systems with Ready Solutions #\rJava’s Spring Framework provides everything you need to build robust, secure, and scalable enterprise applications — from REST APIs to microservices and database integration. Python has powerful frameworks too, like Django and Flask, but Spring is more mature and widely adopted in large corporations.\n6. IDE and Auto-Completion #\rThanks to static typing and a clear structure, Java works beautifully with modern IDEs like IntelliJ IDEA. Auto-completion, real-time error detection, and refactoring tools are extremely accurate.\nWith Python, dynamic typing often makes IDE features less reliable. Sometimes the IDE can’t even guess what attribute comes after a dot.\n7. Testing Culture – Standing Behind Your Code #\rJava has a strong testing culture. Using tools like JUnit, writing unit tests is straightforward and considered best practice. Most serious Java projects include tests from day one.\nPython supports testing too, but in many cases — especially in smaller teams — it tends to be more optional than enforced.\n8. Backward Compatibility #\rOne of Java’s most underrated strengths is its commitment to backward compatibility. Code written 10 or even 20 years ago can often still compile and run on modern JVMs. Compare that to Python\u0026rsquo;s painful transition from version 2 to 3, which broke a lot of older code.\n9. Platform Independence #\rJava lives by the motto: “Write once, run anywhere.” Thanks to the JVM, Java applications can run on Windows, Linux, macOS, and even Android with minimal modification. This kind of portability is invaluable for cross-platform development.\n10. The Satisfaction While Coding #\rThis might be subjective, but it matters to me: when I write Java, I feel like I’m building a solid, durable structure. The strict rules and architectural clarity give me confidence. It feels like engineering, not just scripting.\nWhat About Python? #\rPython is a fantastic language — no doubt about it. It’s great for automation, scripting, data science, AI, and quick prototyping. If speed and simplicity are your top priorities, Python absolutely shines.\nBut for building large, long-term software systems, Java still gives me more reliability and long-term satisfaction.\nFinal Word #\rEvery language has strengths and weaknesses. I happily use Python when it’s the right tool for the job. But Java aligns better with how I like to build systems: with structure, clarity, and confidence.\nJava doesn’t always offer the easiest path — but it often offers the strongest one.\n","date":"28 March 2025","externalUrl":null,"permalink":"/posts/why-i-like-java-more-than-python/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003eWhy I Like Java More Than Python \r\n    \u003cdiv id=\"why-i-like-java-more-than-python\" class=\"anchor\"\u003e\u003c/div\u003e\r\n    \r\n    \u003cspan\r\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\r\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#why-i-like-java-more-than-python\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\r\n    \u003c/span\u003e        \r\n    \r\n\u003c/h2\u003e\r\n\u003cp\u003eGenerally speaking, Java isn’t the most beloved language out there. It requires writing a lot more code, has many rules, and you often need to add extra libraries for things that come built-in with other languages. On top of that, Oracle’s history with licensing lawsuits has given Java a bad reputation among many developers. But despite all that, I still like Java more. I know its flaws, but its strengths mean more to me. Below, I want to explain why — with some practical reasons.\u003c/p\u003e","title":"Why I Like Java More Than Python","type":"posts"},{"content":"\r👋 Welcome! I\u0026rsquo;m Eren Karaoğlu, the creator and author behind Compile My Mind — a place where I share my journey, ideas, projects, and thoughts around software development, game creation, and gaming in general.\nI’m a software developer who loves building meaningful, well-structured, and user-focused applications. From designing robust backend systems with Java Spring, to crafting sleek mobile interfaces with Flutter, building desktop tools with WPF, or even developing my own indie games — I enjoy solving real-world problems through code and creativity.\nI also love talking about the games I play, discovering hidden gems, and sharing recommendations based on experience and mood. Whether it\u0026rsquo;s development or just gaming for fun, I\u0026rsquo;m always looking to learn, grow, and connect with others who share the same passion.\n💡 What Am I About? I love building practical, scalable, and well-structured applications. Whether it’s designing APIs with Spring Boot, creating responsive UIs with Flutter, or building desktop tools with WPF, I enjoy solving real-world problems through clean and efficient code.\nMy focus is always on maintainability, performance, and continuous learning. I\u0026rsquo;m constantly exploring new technologies to sharpen my skills and create better solutions.\n🎓 Education Gazi Technical High School\rInformation Technologies\rCompleted technical high school education focused on software, networking, and hardware. This early exposure sparked my passion for IT and development.\rAtılım University\rB.Sc. in Information Systems Engineering\rGraduated with a solid foundation in programming, database management, systems design, and project coordination.\rAnadolu University\rAssociate Degree in Justice (Ongoing)\rCurrently studying law and legal systems part-time to gain broader interdisciplinary knowledge. School\rProgram\rStatus\rInformation Technologies\rGraduated\rInformation Systems Engineering\rGraduated\rJustice (Associate Degree)\rCurrently Studying\r🧠 Skills \u0026amp; Expertise Software Development Languages: Java, Dart, C#, SQL Frameworks: Spring Boot, Flutter, WPF Frontend: HTML, CSS, JavaScript Databases: PostgreSQL, MySQL, SQLite Tools: Git, IntelliJ, Visual Studio, VS Code, Postman Platforms Mobile: Flutter (Android/iOS) Desktop: WPF (.NET, MVVM) Backend: Spring Boot (REST APIs, business logic) Strengths Clean architecture \u0026amp; maintainable code API design \u0026amp; integration Strong debugging \u0026amp; analytical skills Effective communication \u0026amp; teamwork 📁 Projects 🖥️ WPF (Desktop) SceneShift\nA modern wallpaper utility built with WPF and MVVM. Users can search for wallpapers online and apply them with a single click. Includes resolution filtering, local history, and smooth background transitions. 📱 Flutter (Mobile) Reminder+\nA goal-focused productivity and task management app. Lets users create tasks, set targets, and track progress over time. Designed with a clean, cross-platform Flutter UI.\nWeekly Dish\nAn AI-powered weekly meal planner that generates personalized menus. Features include dynamic shopping lists, nutritional info, and adjustable portions — making meal prep smarter and easier.\nMoodMate (Movie App)\nAn emotion-based content recommendation app. Users select their current mood, and the app suggests fitting movies, TV series, or books using a lightweight AI engine.\n🌐 Java Spring (Backend) NeutronDB\nInspired by ProtonDB, NeutronDB is a lightweight backend system built with Spring Boot. It tracks compatibility and performance data with RESTful API endpoints. Ideal for community feedback systems or benchmarking platforms. ","date":"27 November 2023","externalUrl":null,"permalink":"/about/","section":"","summary":"\u003ch2 class=\"relative group\"\u003e👋 Welcome! \r\n    \u003cdiv id=\"-welcome\" class=\"anchor\"\u003e\u003c/div\u003e\r\n    \r\n\u003c/h2\u003e\r\n\u003cp\u003eI\u0026rsquo;m \u003cstrong\u003eEren Karaoğlu\u003c/strong\u003e, the creator and author behind \u003cstrong\u003eCompile My Mind\u003c/strong\u003e — a place where I share my journey, ideas, projects, and thoughts around software development, game creation, and gaming in general.\u003c/p\u003e","title":"About","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]